
XOGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800200  00800200  00000818  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000117c  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1a  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009dd  00000000  00000000  0000277e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ad  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000594  00000000  00000000  000037d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003d69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 31       	cpi	r26, 0x10	; 16
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	32 d3       	rcall	.+1636   	; 0x76a <main>
 106:	4c c3       	rjmp	.+1688   	; 0x7a0 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <init>:

unsigned char turn;
unsigned char board [3][3];
int r,c;
void init (){
	turn =0;
 10a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <turn>
	for (int i=0;i<3;i++)
	for (int j=0;j<3;j++)
	board[i][j]='.';
 10e:	e1 e0       	ldi	r30, 0x01	; 1
 110:	f2 e0       	ldi	r31, 0x02	; 2
 112:	8e e2       	ldi	r24, 0x2E	; 46
 114:	80 83       	st	Z, r24
 116:	81 83       	std	Z+1, r24	; 0x01
 118:	82 83       	std	Z+2, r24	; 0x02
 11a:	83 83       	std	Z+3, r24	; 0x03
 11c:	84 83       	std	Z+4, r24	; 0x04
 11e:	85 83       	std	Z+5, r24	; 0x05
 120:	86 83       	std	Z+6, r24	; 0x06
 122:	87 83       	std	Z+7, r24	; 0x07
 124:	80 87       	std	Z+8, r24	; 0x08
	r=c=0;
 126:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <c+0x1>
 12a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <c>
 12e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <r+0x1>
 132:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <r>
 136:	08 95       	ret

00000138 <Left>:
	
}
unsigned char Left(){
	if (c==0)return 1;
 138:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <c>
 13c:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <c+0x1>
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	39 f0       	breq	.+14     	; 0x152 <Left+0x1a>
	c--;
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <c+0x1>
 14a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <c>
	return 0;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret
	board[i][j]='.';
	r=c=0;
	
}
unsigned char Left(){
	if (c==0)return 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
	c--;
	return 0;
}
 154:	08 95       	ret

00000156 <Right>:
unsigned char Right(){
	if (c==2)return 1;
 156:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <c>
 15a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <c+0x1>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	91 05       	cpc	r25, r1
 162:	39 f0       	breq	.+14     	; 0x172 <Right+0x1c>
	c++;
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <c+0x1>
 16a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <c>
	return 0;
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
	if (c==0)return 1;
	c--;
	return 0;
}
unsigned char Right(){
	if (c==2)return 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
	c++;
	return 0;
}
 174:	08 95       	ret

00000176 <Up>:
unsigned char Up(){
	if (r==0)return 1;
 176:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <r>
 17a:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <r+0x1>
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	39 f0       	breq	.+14     	; 0x190 <Up+0x1a>
	r--;
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <r+0x1>
 188:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <r>
	return 0;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
	if (c==2)return 1;
	c++;
	return 0;
}
unsigned char Up(){
	if (r==0)return 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
	r--;
	return 0;
}
 192:	08 95       	ret

00000194 <Down>:
unsigned char Down(){
	if (r==2)return 1;
 194:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <r>
 198:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <r+0x1>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	91 05       	cpc	r25, r1
 1a0:	39 f0       	breq	.+14     	; 0x1b0 <Down+0x1c>
	r++;
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <r+0x1>
 1a8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <r>
	return 0;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret
	if (r==0)return 1;
	r--;
	return 0;
}
unsigned char Down(){
	if (r==2)return 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
	r++;
	return 0;
}
 1b2:	08 95       	ret

000001b4 <gameState>:

// 0 lsa ma5lstsh , 1 el awl faz , 2 el tany faz, 3 draw
unsigned char win;
int gameState(){
	if(board[0][0] == board[0][1] && board[0][0]==board[0][2] && board[0][0] == 'x' ){
 1b4:	e1 e0       	ldi	r30, 0x01	; 1
 1b6:	f2 e0       	ldi	r31, 0x02	; 2
 1b8:	80 81       	ld	r24, Z
 1ba:	31 81       	ldd	r19, Z+1	; 0x01
 1bc:	83 13       	cpse	r24, r19
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <gameState+0x22>
 1c0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <board+0x2>
 1c4:	89 13       	cpse	r24, r25
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <gameState+0x22>
 1c8:	88 37       	cpi	r24, 0x78	; 120
 1ca:	29 f4       	brne	.+10     	; 0x1d6 <gameState+0x22>
		win=0;
 1cc:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <win>
		return 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	08 95       	ret
	}
	if(board[1][0] == board[1][1] && board[1][0]==board[1][2] && board[1][0] == 'x' ){
 1d6:	e1 e0       	ldi	r30, 0x01	; 1
 1d8:	f2 e0       	ldi	r31, 0x02	; 2
 1da:	23 81       	ldd	r18, Z+3	; 0x03
 1dc:	94 81       	ldd	r25, Z+4	; 0x04
 1de:	29 13       	cpse	r18, r25
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <gameState+0x46>
 1e2:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <board+0x5>
 1e6:	24 13       	cpse	r18, r20
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <gameState+0x46>
 1ea:	28 37       	cpi	r18, 0x78	; 120
 1ec:	31 f4       	brne	.+12     	; 0x1fa <gameState+0x46>
		win=1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	08 95       	ret
	}
	if(board[2][0] == board[2][1] && board[2][0]==board[2][2] && board[2][0] == 'x' ){
 1fa:	e1 e0       	ldi	r30, 0x01	; 1
 1fc:	f2 e0       	ldi	r31, 0x02	; 2
 1fe:	46 81       	ldd	r20, Z+6	; 0x06
 200:	67 81       	ldd	r22, Z+7	; 0x07
 202:	46 13       	cpse	r20, r22
 204:	0c c0       	rjmp	.+24     	; 0x21e <gameState+0x6a>
 206:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <board+0x8>
 20a:	45 13       	cpse	r20, r21
 20c:	08 c0       	rjmp	.+16     	; 0x21e <gameState+0x6a>
 20e:	48 37       	cpi	r20, 0x78	; 120
 210:	31 f4       	brne	.+12     	; 0x21e <gameState+0x6a>
		win=2;
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 1;	
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret
	}
	if(board[0][0] == board[0][1] && board[0][0]==board[0][2] && board[0][0] == 'o' ){
 21e:	83 13       	cpse	r24, r19
 220:	0b c0       	rjmp	.+22     	; 0x238 <gameState+0x84>
 222:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <board+0x2>
 226:	85 13       	cpse	r24, r21
 228:	07 c0       	rjmp	.+14     	; 0x238 <gameState+0x84>
 22a:	8f 36       	cpi	r24, 0x6F	; 111
 22c:	29 f4       	brne	.+10     	; 0x238 <gameState+0x84>
		win=0;
 22e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <win>
		return 2;
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	08 95       	ret
	}
	if(board[1][0] == board[1][1] && board[1][0]==board[1][2] && board[1][0] == 'o' ){
 238:	29 13       	cpse	r18, r25
 23a:	0c c0       	rjmp	.+24     	; 0x254 <gameState+0xa0>
 23c:	50 91 06 02 	lds	r21, 0x0206	; 0x800206 <board+0x5>
 240:	25 13       	cpse	r18, r21
 242:	08 c0       	rjmp	.+16     	; 0x254 <gameState+0xa0>
 244:	2f 36       	cpi	r18, 0x6F	; 111
 246:	31 f4       	brne	.+12     	; 0x254 <gameState+0xa0>
		win=1;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 2;
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	08 95       	ret
	}
	if(board[2][0] == board[2][1] && board[2][0]==board[2][2] && board[2][0] == 'o' ){
 254:	46 13       	cpse	r20, r22
 256:	0c c0       	rjmp	.+24     	; 0x270 <gameState+0xbc>
 258:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <board+0x8>
 25c:	45 13       	cpse	r20, r21
 25e:	08 c0       	rjmp	.+16     	; 0x270 <gameState+0xbc>
 260:	4f 36       	cpi	r20, 0x6F	; 111
 262:	31 f4       	brne	.+12     	; 0x270 <gameState+0xbc>
		win=2;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 2;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	08 95       	ret
	}
	if(board[0][0] == board[1][0] && board[0][0]==board[2][0] && board[0][0] == 'x' ){
 270:	82 13       	cpse	r24, r18
 272:	0a c0       	rjmp	.+20     	; 0x288 <gameState+0xd4>
 274:	84 13       	cpse	r24, r20
 276:	08 c0       	rjmp	.+16     	; 0x288 <gameState+0xd4>
 278:	88 37       	cpi	r24, 0x78	; 120
 27a:	31 f4       	brne	.+12     	; 0x288 <gameState+0xd4>
		win=3+0;
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret
	}
	if(board[0][1] == board[1][1] && board[0][1]==board[2][1] && board[0][1] == 'x' ){
 288:	39 13       	cpse	r19, r25
 28a:	0a c0       	rjmp	.+20     	; 0x2a0 <gameState+0xec>
 28c:	36 13       	cpse	r19, r22
 28e:	08 c0       	rjmp	.+16     	; 0x2a0 <gameState+0xec>
 290:	38 37       	cpi	r19, 0x78	; 120
 292:	31 f4       	brne	.+12     	; 0x2a0 <gameState+0xec>
		win=3+1;
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	08 95       	ret
	}
	if(board[0][2] == board[1][2] && board[0][2]==board[2][2] && board[0][2] == 'x' ){
 2a0:	e1 e0       	ldi	r30, 0x01	; 1
 2a2:	f2 e0       	ldi	r31, 0x02	; 2
 2a4:	52 81       	ldd	r21, Z+2	; 0x02
 2a6:	75 81       	ldd	r23, Z+5	; 0x05
 2a8:	57 13       	cpse	r21, r23
 2aa:	0c c0       	rjmp	.+24     	; 0x2c4 <gameState+0x110>
 2ac:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <board+0x8>
 2b0:	5e 13       	cpse	r21, r30
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <gameState+0x110>
 2b4:	58 37       	cpi	r21, 0x78	; 120
 2b6:	31 f4       	brne	.+12     	; 0x2c4 <gameState+0x110>
		win=3+2;
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	08 95       	ret
	}
	if(board[0][0] == board[1][1] && board[2][2]==board[1][1] && board[0][0] == 'x' ){
 2c4:	89 13       	cpse	r24, r25
 2c6:	13 c0       	rjmp	.+38     	; 0x2ee <gameState+0x13a>
 2c8:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <board+0x8>
 2cc:	8e 13       	cpse	r24, r30
 2ce:	0f c0       	rjmp	.+30     	; 0x2ee <gameState+0x13a>
 2d0:	88 37       	cpi	r24, 0x78	; 120
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <gameState+0x122>
 2d4:	68 c0       	rjmp	.+208    	; 0x3a6 <gameState+0x1f2>
		win=6;
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	08 95       	ret
	}
	if(board[0][0] == board[1][1] && board[2][2]==board[1][1] && board[0][0] == 'o' ){
		win=6;
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 2;
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	08 95       	ret
	}
	if(board[0][0] == board[1][0] && board[0][0]==board[2][0] && board[0][0] == 'o' ){
 2ee:	82 13       	cpse	r24, r18
 2f0:	0a c0       	rjmp	.+20     	; 0x306 <gameState+0x152>
 2f2:	84 13       	cpse	r24, r20
 2f4:	08 c0       	rjmp	.+16     	; 0x306 <gameState+0x152>
 2f6:	8f 36       	cpi	r24, 0x6F	; 111
 2f8:	31 f4       	brne	.+12     	; 0x306 <gameState+0x152>
		win=3+0;
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 2;
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	08 95       	ret
	}
	if(board[0][1] == board[1][1] && board[0][1]==board[2][1] && board[0][1] == 'o' ){
 306:	39 13       	cpse	r19, r25
 308:	0a c0       	rjmp	.+20     	; 0x31e <gameState+0x16a>
 30a:	36 13       	cpse	r19, r22
 30c:	08 c0       	rjmp	.+16     	; 0x31e <gameState+0x16a>
 30e:	3f 36       	cpi	r19, 0x6F	; 111
 310:	31 f4       	brne	.+12     	; 0x31e <gameState+0x16a>
		win=3+1;
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 2;
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	08 95       	ret
	}
	if(board[0][2] == board[1][2] && board[0][2]==board[2][2] && board[0][2] == 'o' ){
 31e:	57 13       	cpse	r21, r23
 320:	0c c0       	rjmp	.+24     	; 0x33a <gameState+0x186>
 322:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <board+0x8>
 326:	58 13       	cpse	r21, r24
 328:	08 c0       	rjmp	.+16     	; 0x33a <gameState+0x186>
 32a:	5f 36       	cpi	r21, 0x6F	; 111
 32c:	31 f4       	brne	.+12     	; 0x33a <gameState+0x186>
		win=3+2;
 32e:	85 e0       	ldi	r24, 0x05	; 5
 330:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 2;
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	08 95       	ret
	}
	if(board[0][2] == board[1][1] && board[2][0]==board[1][1] && board[1][1] == 'x' ){
 33a:	95 17       	cp	r25, r21
 33c:	29 f0       	breq	.+10     	; 0x348 <gameState+0x194>
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	92 e0       	ldi	r25, 0x02	; 2
 342:	4c e0       	ldi	r20, 0x0C	; 12
 344:	52 e0       	ldi	r21, 0x02	; 2
 346:	19 c0       	rjmp	.+50     	; 0x37a <gameState+0x1c6>
 348:	94 13       	cpse	r25, r20
 34a:	f9 cf       	rjmp	.-14     	; 0x33e <gameState+0x18a>
 34c:	98 37       	cpi	r25, 0x78	; 120
 34e:	31 f4       	brne	.+12     	; 0x35c <gameState+0x1a8>
		win=7;
 350:	87 e0       	ldi	r24, 0x07	; 7
 352:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	08 95       	ret
	}
	if(board[0][2] == board[1][1] && board[2][0]==board[1][1] && board[1][1] == 'o' ){
 35c:	9f 36       	cpi	r25, 0x6F	; 111
 35e:	79 f7       	brne	.-34     	; 0x33e <gameState+0x18a>
		win=7;
 360:	87 e0       	ldi	r24, 0x07	; 7
 362:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <win>
		return 2;
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	08 95       	ret
	}
	
	for(int i = 0 ; i <3 ; i++)
	for(int j = 0 ; j<3 ; j++)
	if(board[i][j] == '.') return 0;
 36c:	2c 91       	ld	r18, X
 36e:	2e 32       	cpi	r18, 0x2E	; 46
 370:	89 f0       	breq	.+34     	; 0x394 <gameState+0x1e0>
 372:	03 96       	adiw	r24, 0x03	; 3
	if(board[0][2] == board[1][1] && board[2][0]==board[1][1] && board[1][1] == 'o' ){
		win=7;
		return 2;
	}
	
	for(int i = 0 ; i <3 ; i++)
 374:	84 17       	cp	r24, r20
 376:	95 07       	cpc	r25, r21
 378:	81 f0       	breq	.+32     	; 0x39a <gameState+0x1e6>
 37a:	dc 01       	movw	r26, r24
 37c:	fc 01       	movw	r30, r24
 37e:	32 97       	sbiw	r30, 0x02	; 2
	for(int j = 0 ; j<3 ; j++)
	if(board[i][j] == '.') return 0;
 380:	20 81       	ld	r18, Z
 382:	2e 32       	cpi	r18, 0x2E	; 46
 384:	69 f0       	breq	.+26     	; 0x3a0 <gameState+0x1ec>
 386:	31 96       	adiw	r30, 0x01	; 1
 388:	20 81       	ld	r18, Z
 38a:	2e 32       	cpi	r18, 0x2E	; 46
 38c:	79 f7       	brne	.-34     	; 0x36c <gameState+0x1b8>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	08 95       	ret
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	08 95       	ret
	
	return 3;
 39a:	83 e0       	ldi	r24, 0x03	; 3
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	08 95       	ret
		return 2;
	}
	
	for(int i = 0 ; i <3 ; i++)
	for(int j = 0 ; j<3 ; j++)
	if(board[i][j] == '.') return 0;
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	08 95       	ret
	}
	if(board[0][0] == board[1][1] && board[2][2]==board[1][1] && board[0][0] == 'x' ){
		win=6;
		return 1;
	}
	if(board[0][0] == board[1][1] && board[2][2]==board[1][1] && board[0][0] == 'o' ){
 3a6:	8f 36       	cpi	r24, 0x6F	; 111
 3a8:	09 f0       	breq	.+2      	; 0x3ac <gameState+0x1f8>
 3aa:	a1 cf       	rjmp	.-190    	; 0x2ee <gameState+0x13a>
 3ac:	9a cf       	rjmp	.-204    	; 0x2e2 <gameState+0x12e>

000003ae <add>:
	
	return 3;
}

unsigned char add (){
	if (board[r][c]!='.')return 1;
 3ae:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <r>
 3b2:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <r+0x1>
 3b6:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <c>
 3ba:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <c+0x1>
 3be:	fc 01       	movw	r30, r24
 3c0:	ee 0f       	add	r30, r30
 3c2:	ff 1f       	adc	r31, r31
 3c4:	e8 0f       	add	r30, r24
 3c6:	f9 1f       	adc	r31, r25
 3c8:	e2 0f       	add	r30, r18
 3ca:	f3 1f       	adc	r31, r19
 3cc:	ef 5f       	subi	r30, 0xFF	; 255
 3ce:	fd 4f       	sbci	r31, 0xFD	; 253
 3d0:	40 81       	ld	r20, Z
 3d2:	4e 32       	cpi	r20, 0x2E	; 46
 3d4:	c1 f4       	brne	.+48     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	board[r][c]=(turn?'o':'x');
 3d6:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <turn>
 3da:	41 11       	cpse	r20, r1
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <add+0x34>
 3de:	58 e7       	ldi	r21, 0x78	; 120
 3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <add+0x36>
 3e2:	5f e6       	ldi	r21, 0x6F	; 111
 3e4:	bc 01       	movw	r22, r24
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	86 0f       	add	r24, r22
 3ec:	97 1f       	adc	r25, r23
 3ee:	82 0f       	add	r24, r18
 3f0:	93 1f       	adc	r25, r19
 3f2:	fc 01       	movw	r30, r24
 3f4:	ef 5f       	subi	r30, 0xFF	; 255
 3f6:	fd 4f       	sbci	r31, 0xFD	; 253
 3f8:	50 83       	st	Z, r21
	turn=1-turn;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	84 1b       	sub	r24, r20
 3fe:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <turn>
	return 0;
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret
	
	return 3;
}

unsigned char add (){
	if (board[r][c]!='.')return 1;
 406:	81 e0       	ldi	r24, 0x01	; 1
	board[r][c]=(turn?'o':'x');
	turn=1-turn;
	return 0;
}
 408:	08 95       	ret

0000040a <action>:
		action();
		_delay_ms(1500);
	}

}
void action(){
 40a:	cf 92       	push	r12
 40c:	df 92       	push	r13
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
	if (!ended){
 41a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 41e:	81 11       	cpse	r24, r1
 420:	9b c1       	rjmp	.+822    	; 0x758 <action+0x34e>
	if(!(PIND & (1<<0))){
 422:	48 99       	sbic	0x09, 0	; 9
 424:	0f c0       	rjmp	.+30     	; 0x444 <action+0x3a>
		if(Left()){
 426:	88 de       	rcall	.-752    	; 0x138 <Left>
 428:	88 23       	and	r24, r24
 42a:	61 f0       	breq	.+24     	; 0x444 <action+0x3a>
			PORTG |= 0x01;
 42c:	a0 9a       	sbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42e:	2f e3       	ldi	r18, 0x3F	; 63
 430:	3d e0       	ldi	r19, 0x0D	; 13
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	21 50       	subi	r18, 0x01	; 1
 436:	30 40       	sbci	r19, 0x00	; 0
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <action+0x2a>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <action+0x34>
 43e:	00 00       	nop
			_delay_ms(1000);
			PORTG &= 0;
 440:	84 b3       	in	r24, 0x14	; 20
 442:	14 ba       	out	0x14, r1	; 20
		}
	}
	if(!(PIND & (1<<1))){
 444:	49 99       	sbic	0x09, 1	; 9
 446:	0f c0       	rjmp	.+30     	; 0x466 <action+0x5c>
		if(Right()){
 448:	86 de       	rcall	.-756    	; 0x156 <Right>
 44a:	88 23       	and	r24, r24
 44c:	61 f0       	breq	.+24     	; 0x466 <action+0x5c>
			PORTG |= 0x01;
 44e:	a0 9a       	sbi	0x14, 0	; 20
 450:	9f e3       	ldi	r25, 0x3F	; 63
 452:	2d e0       	ldi	r18, 0x0D	; 13
 454:	33 e0       	ldi	r19, 0x03	; 3
 456:	91 50       	subi	r25, 0x01	; 1
 458:	20 40       	sbci	r18, 0x00	; 0
 45a:	30 40       	sbci	r19, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <action+0x4c>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <action+0x56>
 460:	00 00       	nop
			_delay_ms(1000);
			PORTG &= 0;
 462:	84 b3       	in	r24, 0x14	; 20
 464:	14 ba       	out	0x14, r1	; 20
		}
	}
	if(!(PIND & (1<<2))){
 466:	4a 99       	sbic	0x09, 2	; 9
 468:	0f c0       	rjmp	.+30     	; 0x488 <action+0x7e>
		if(Up()){
 46a:	85 de       	rcall	.-758    	; 0x176 <Up>
 46c:	88 23       	and	r24, r24
 46e:	61 f0       	breq	.+24     	; 0x488 <action+0x7e>
			PORTG |= 0x01;
 470:	a0 9a       	sbi	0x14, 0	; 20
 472:	8f e3       	ldi	r24, 0x3F	; 63
 474:	9d e0       	ldi	r25, 0x0D	; 13
 476:	23 e0       	ldi	r18, 0x03	; 3
 478:	81 50       	subi	r24, 0x01	; 1
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	20 40       	sbci	r18, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <action+0x6e>
 480:	00 c0       	rjmp	.+0      	; 0x482 <action+0x78>
 482:	00 00       	nop
			_delay_ms(1000);
			PORTG &= 0;
 484:	84 b3       	in	r24, 0x14	; 20
 486:	14 ba       	out	0x14, r1	; 20
		}
	}
	if(!(PIND & (1<<3))){
 488:	4b 99       	sbic	0x09, 3	; 9
 48a:	0f c0       	rjmp	.+30     	; 0x4aa <action+0xa0>
		if(Down()){
 48c:	83 de       	rcall	.-762    	; 0x194 <Down>
 48e:	88 23       	and	r24, r24
 490:	61 f0       	breq	.+24     	; 0x4aa <action+0xa0>
			PORTG |= 0x01;
 492:	a0 9a       	sbi	0x14, 0	; 20
 494:	3f e3       	ldi	r19, 0x3F	; 63
 496:	8d e0       	ldi	r24, 0x0D	; 13
 498:	93 e0       	ldi	r25, 0x03	; 3
 49a:	31 50       	subi	r19, 0x01	; 1
 49c:	80 40       	sbci	r24, 0x00	; 0
 49e:	90 40       	sbci	r25, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <action+0x90>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <action+0x9a>
 4a4:	00 00       	nop
			_delay_ms(1000);
			PORTG &= 0;
 4a6:	84 b3       	in	r24, 0x14	; 20
 4a8:	14 ba       	out	0x14, r1	; 20
		}
	}
	if(!(PIND & (1<<7))){
 4aa:	4f 99       	sbic	0x09, 7	; 9
 4ac:	4c c1       	rjmp	.+664    	; 0x746 <action+0x33c>
		if(add()){
 4ae:	7f df       	rcall	.-258    	; 0x3ae <add>
 4b0:	88 23       	and	r24, r24
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <action+0xac>
 4b4:	48 c1       	rjmp	.+656    	; 0x746 <action+0x33c>
			PORTG |= 0x01;
 4b6:	a0 9a       	sbi	0x14, 0	; 20
 4b8:	2f e3       	ldi	r18, 0x3F	; 63
 4ba:	3d e0       	ldi	r19, 0x0D	; 13
 4bc:	83 e0       	ldi	r24, 0x03	; 3
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	30 40       	sbci	r19, 0x00	; 0
 4c2:	80 40       	sbci	r24, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <action+0xb4>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <action+0xbe>
 4c8:	00 00       	nop
			_delay_ms(1000);
			PORTG &= 0;
 4ca:	84 b3       	in	r24, 0x14	; 20
 4cc:	14 ba       	out	0x14, r1	; 20
 4ce:	3b c1       	rjmp	.+630    	; 0x746 <action+0x33c>
		}
	}
	
	for (int i=0;i<3;i++){
		for (int j=0;j<3;j++){
			if (board[i][j]=='x'){
 4d0:	6d 91       	ld	r22, X+
 4d2:	68 37       	cpi	r22, 0x78	; 120
 4d4:	b1 f4       	brne	.+44     	; 0x502 <action+0xf8>
				if (i==2 && j==2){
 4d6:	22 30       	cpi	r18, 0x02	; 2
 4d8:	31 05       	cpc	r19, r1
 4da:	29 f4       	brne	.+10     	; 0x4e6 <action+0xdc>
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	91 05       	cpc	r25, r1
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <action+0xdc>
					PORTA |= 1<<(0);
 4e2:	10 9a       	sbi	0x02, 0	; 2
 4e4:	29 c0       	rjmp	.+82     	; 0x538 <action+0x12e>
				}
				else  PORTC |= 1<<(i*3+j);
 4e6:	18 b1       	in	r17, 0x08	; 8
 4e8:	ba 01       	movw	r22, r20
 4ea:	68 0f       	add	r22, r24
 4ec:	79 1f       	adc	r23, r25
 4ee:	6f 01       	movw	r12, r30
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <action+0xec>
 4f2:	cc 0c       	add	r12, r12
 4f4:	dd 1c       	adc	r13, r13
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <action+0xe8>
 4fa:	b6 01       	movw	r22, r12
 4fc:	61 2b       	or	r22, r17
 4fe:	68 b9       	out	0x08, r22	; 8
 500:	17 c0       	rjmp	.+46     	; 0x530 <action+0x126>
			}
			else if (board[i][j]=='o'){
 502:	6f 36       	cpi	r22, 0x6F	; 111
 504:	a9 f4       	brne	.+42     	; 0x530 <action+0x126>
				if (i==2 && j==2){
 506:	22 30       	cpi	r18, 0x02	; 2
 508:	31 05       	cpc	r19, r1
 50a:	29 f4       	brne	.+10     	; 0x516 <action+0x10c>
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	91 05       	cpc	r25, r1
 510:	11 f4       	brne	.+4      	; 0x516 <action+0x10c>
					PORTA |= 1<<(1);
 512:	11 9a       	sbi	0x02, 1	; 2
 514:	11 c0       	rjmp	.+34     	; 0x538 <action+0x12e>
				}
				else  PORTB |= 1<<(i*3+j);
 516:	15 b1       	in	r17, 0x05	; 5
 518:	ba 01       	movw	r22, r20
 51a:	68 0f       	add	r22, r24
 51c:	79 1f       	adc	r23, r25
 51e:	7f 01       	movw	r14, r30
 520:	02 c0       	rjmp	.+4      	; 0x526 <action+0x11c>
 522:	ee 0c       	add	r14, r14
 524:	ff 1c       	adc	r15, r15
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <action+0x118>
 52a:	b7 01       	movw	r22, r14
 52c:	61 2b       	or	r22, r17
 52e:	65 b9       	out	0x05, r22	; 5
			PORTG &= 0;
		}
	}
	
	for (int i=0;i<3;i++){
		for (int j=0;j<3;j++){
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	83 30       	cpi	r24, 0x03	; 3
 534:	91 05       	cpc	r25, r1
 536:	61 f6       	brne	.-104    	; 0x4d0 <action+0xc6>
			_delay_ms(1000);
			PORTG &= 0;
		}
	}
	
	for (int i=0;i<3;i++){
 538:	2f 5f       	subi	r18, 0xFF	; 255
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
 53c:	4d 5f       	subi	r20, 0xFD	; 253
 53e:	5f 4f       	sbci	r21, 0xFF	; 255
 540:	23 30       	cpi	r18, 0x03	; 3
 542:	31 05       	cpc	r19, r1
 544:	31 f0       	breq	.+12     	; 0x552 <action+0x148>
 546:	da 01       	movw	r26, r20
 548:	af 5f       	subi	r26, 0xFF	; 255
 54a:	bd 4f       	sbci	r27, 0xFD	; 253
		action();
		_delay_ms(1500);
	}

}
void action(){
 54c:	8d 2f       	mov	r24, r29
 54e:	9c 2f       	mov	r25, r28
 550:	bf cf       	rjmp	.-130    	; 0x4d0 <action+0xc6>
				else  PORTB |= 1<<(i*3+j);
			}
			
		}
	}
	PORTL = 0;
 552:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PORTA &= 0b11111011;
 556:	12 98       	cbi	0x02, 2	; 2
	if (r==2 && c==2){
 558:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <r>
 55c:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <r+0x1>
 560:	22 30       	cpi	r18, 0x02	; 2
 562:	31 05       	cpc	r19, r1
 564:	41 f4       	brne	.+16     	; 0x576 <action+0x16c>
 566:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <c>
 56a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <c+0x1>
 56e:	02 97       	sbiw	r24, 0x02	; 2
 570:	11 f4       	brne	.+4      	; 0x576 <action+0x16c>
		PORTA |= 1<<(2);
 572:	12 9a       	sbi	0x02, 2	; 2
 574:	17 c0       	rjmp	.+46     	; 0x5a4 <action+0x19a>
	}
	else  PORTL |= 1<<(r*3+c);
 576:	eb e0       	ldi	r30, 0x0B	; 11
 578:	f1 e0       	ldi	r31, 0x01	; 1
 57a:	60 81       	ld	r22, Z
 57c:	c9 01       	movw	r24, r18
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	28 0f       	add	r18, r24
 584:	39 1f       	adc	r19, r25
 586:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <c>
 58a:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <c+0x1>
 58e:	24 0f       	add	r18, r20
 590:	35 1f       	adc	r19, r21
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <action+0x192>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	2a 95       	dec	r18
 59e:	e2 f7       	brpl	.-8      	; 0x598 <action+0x18e>
 5a0:	86 2b       	or	r24, r22
 5a2:	80 83       	st	Z, r24
	
	if (turn){
 5a4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <turn>
 5a8:	88 23       	and	r24, r24
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <action+0x1a8>
		PORTA |= 1<<(3);
 5ac:	13 9a       	sbi	0x02, 3	; 2
		PORTA &= ~(1<<(7));
 5ae:	17 98       	cbi	0x02, 7	; 2
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <action+0x1ac>
	}
	
	else {
		PORTA |= 1<<(7);
 5b2:	17 9a       	sbi	0x02, 7	; 2
		PORTA &= ~(1<<(3));
 5b4:	13 98       	cbi	0x02, 3	; 2
	}
	ended=gameState();
 5b6:	fe dd       	rcall	.-1028   	; 0x1b4 <gameState>
 5b8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	if (ended>0){
 5bc:	88 23       	and	r24, r24
 5be:	09 f4       	brne	.+2      	; 0x5c2 <action+0x1b8>
 5c0:	cb c0       	rjmp	.+406    	; 0x758 <action+0x34e>
		PORTB = 0;
 5c2:	15 b8       	out	0x05, r1	; 5
		PORTC = 0;
 5c4:	18 b8       	out	0x08, r1	; 8
		PORTA = 0;
 5c6:	12 b8       	out	0x02, r1	; 2
		if (ended==1 || ended ==2){
 5c8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 5cc:	9f ef       	ldi	r25, 0xFF	; 255
 5ce:	98 0f       	add	r25, r24
 5d0:	92 30       	cpi	r25, 0x02	; 2
 5d2:	08 f0       	brcs	.+2      	; 0x5d6 <action+0x1cc>
 5d4:	9e c0       	rjmp	.+316    	; 0x712 <action+0x308>
			unsigned char ch =(ended==1?'x':'o');
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	11 f0       	breq	.+4      	; 0x5de <action+0x1d4>
 5da:	2f e6       	ldi	r18, 0x6F	; 111
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <action+0x1d6>
 5de:	28 e7       	ldi	r18, 0x78	; 120
			for (int i=0;i<3;i++)
			for (int j=0;j<3;j++)board[i][j]='.';
 5e0:	e1 e0       	ldi	r30, 0x01	; 1
 5e2:	f2 e0       	ldi	r31, 0x02	; 2
 5e4:	8e e2       	ldi	r24, 0x2E	; 46
 5e6:	80 83       	st	Z, r24
 5e8:	81 83       	std	Z+1, r24	; 0x01
 5ea:	82 83       	std	Z+2, r24	; 0x02
 5ec:	83 83       	std	Z+3, r24	; 0x03
 5ee:	84 83       	std	Z+4, r24	; 0x04
 5f0:	85 83       	std	Z+5, r24	; 0x05
 5f2:	86 83       	std	Z+6, r24	; 0x06
 5f4:	87 83       	std	Z+7, r24	; 0x07
 5f6:	80 87       	std	Z+8, r24	; 0x08
			if (win<3){
 5f8:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <win>
 5fc:	e3 30       	cpi	r30, 0x03	; 3
 5fe:	70 f4       	brcc	.+28     	; 0x61c <action+0x212>
				board[win][0]=board[win][1]=board[win][2]=ch;
 600:	8e 2f       	mov	r24, r30
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	fc 01       	movw	r30, r24
 606:	ee 0f       	add	r30, r30
 608:	ff 1f       	adc	r31, r31
 60a:	8e 0f       	add	r24, r30
 60c:	9f 1f       	adc	r25, r31
 60e:	fc 01       	movw	r30, r24
 610:	ef 5f       	subi	r30, 0xFF	; 255
 612:	fd 4f       	sbci	r31, 0xFD	; 253
 614:	22 83       	std	Z+2, r18	; 0x02
 616:	21 83       	std	Z+1, r18	; 0x01
 618:	20 83       	st	Z, r18
 61a:	10 c0       	rjmp	.+32     	; 0x63c <action+0x232>
			}
			else if (win<6){
 61c:	e6 30       	cpi	r30, 0x06	; 6
 61e:	38 f4       	brcc	.+14     	; 0x62e <action+0x224>
				board[0][win-3]=board[1][win-3]=board[2][win-3]=ch;
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	e2 50       	subi	r30, 0x02	; 2
 624:	fe 4f       	sbci	r31, 0xFE	; 254
 626:	26 83       	std	Z+6, r18	; 0x06
 628:	23 83       	std	Z+3, r18	; 0x03
 62a:	20 83       	st	Z, r18
 62c:	07 c0       	rjmp	.+14     	; 0x63c <action+0x232>
			}
			else if (win==6){
 62e:	e6 30       	cpi	r30, 0x06	; 6
 630:	61 f4       	brne	.+24     	; 0x64a <action+0x240>
				board[0][0]=board[1][1]=board[2][2]=ch;
 632:	e1 e0       	ldi	r30, 0x01	; 1
 634:	f2 e0       	ldi	r31, 0x02	; 2
 636:	20 87       	std	Z+8, r18	; 0x08
 638:	24 83       	std	Z+4, r18	; 0x04
 63a:	20 83       	st	Z, r18
	if (ended>0){
		PORTB = 0;
		PORTC = 0;
		PORTA = 0;
		if (ended==1 || ended ==2){
			unsigned char ch =(ended==1?'x':'o');
 63c:	f1 2c       	mov	r15, r1
 63e:	00 e0       	ldi	r16, 0x00	; 0
						}
						else if (board[i][j]=='o'){
							if (i==2 && j==2){
								PORTA |= 1<<(1);
							}
							else  PORTB |= 1<<(i*3+j);
 640:	c1 e0       	ldi	r28, 0x01	; 1
 642:	d0 e0       	ldi	r29, 0x00	; 0
	if (ended>0){
		PORTB = 0;
		PORTC = 0;
		PORTA = 0;
		if (ended==1 || ended ==2){
			unsigned char ch =(ended==1?'x':'o');
 644:	1f 2d       	mov	r17, r15
 646:	b0 2f       	mov	r27, r16
 648:	06 c0       	rjmp	.+12     	; 0x656 <action+0x24c>
			}
			else if (win==6){
				board[0][0]=board[1][1]=board[2][2]=ch;
			}
			else {
				board[0][2]=board[1][1]=board[2][0]=ch;
 64a:	e1 e0       	ldi	r30, 0x01	; 1
 64c:	f2 e0       	ldi	r31, 0x02	; 2
 64e:	26 83       	std	Z+6, r18	; 0x06
 650:	24 83       	std	Z+4, r18	; 0x04
 652:	22 83       	std	Z+2, r18	; 0x02
 654:	f3 cf       	rjmp	.-26     	; 0x63c <action+0x232>
	if (ended>0){
		PORTB = 0;
		PORTC = 0;
		PORTA = 0;
		if (ended==1 || ended ==2){
			unsigned char ch =(ended==1?'x':'o');
 656:	6f 2d       	mov	r22, r15
 658:	70 2f       	mov	r23, r16
			else {
				board[0][2]=board[1][1]=board[2][0]=ch;
			}
			
			while(1){
				for (int i=0;i<3;i++){
 65a:	4f 2d       	mov	r20, r15
 65c:	50 2f       	mov	r21, r16
 65e:	3b c0       	rjmp	.+118    	; 0x6d6 <action+0x2cc>
					for (int j=0;j<3;j++){
						if (board[i][j]=='x'){
 660:	21 91       	ld	r18, Z+
 662:	28 37       	cpi	r18, 0x78	; 120
 664:	b1 f4       	brne	.+44     	; 0x692 <action+0x288>
							if (i==2 && j==2){
 666:	42 30       	cpi	r20, 0x02	; 2
 668:	51 05       	cpc	r21, r1
 66a:	29 f4       	brne	.+10     	; 0x676 <action+0x26c>
 66c:	82 30       	cpi	r24, 0x02	; 2
 66e:	91 05       	cpc	r25, r1
 670:	11 f4       	brne	.+4      	; 0x676 <action+0x26c>
								PORTA |= 1<<(0);
 672:	10 9a       	sbi	0x02, 0	; 2
 674:	29 c0       	rjmp	.+82     	; 0x6c8 <action+0x2be>
							}
							else  PORTC |= 1<<(i*3+j);
 676:	a8 b1       	in	r26, 0x08	; 8
 678:	9b 01       	movw	r18, r22
 67a:	28 0f       	add	r18, r24
 67c:	39 1f       	adc	r19, r25
 67e:	6e 01       	movw	r12, r28
 680:	02 c0       	rjmp	.+4      	; 0x686 <action+0x27c>
 682:	cc 0c       	add	r12, r12
 684:	dd 1c       	adc	r13, r13
 686:	2a 95       	dec	r18
 688:	e2 f7       	brpl	.-8      	; 0x682 <action+0x278>
 68a:	96 01       	movw	r18, r12
 68c:	2a 2b       	or	r18, r26
 68e:	28 b9       	out	0x08, r18	; 8
 690:	17 c0       	rjmp	.+46     	; 0x6c0 <action+0x2b6>
						}
						else if (board[i][j]=='o'){
 692:	2f 36       	cpi	r18, 0x6F	; 111
 694:	a9 f4       	brne	.+42     	; 0x6c0 <action+0x2b6>
							if (i==2 && j==2){
 696:	42 30       	cpi	r20, 0x02	; 2
 698:	51 05       	cpc	r21, r1
 69a:	29 f4       	brne	.+10     	; 0x6a6 <action+0x29c>
 69c:	82 30       	cpi	r24, 0x02	; 2
 69e:	91 05       	cpc	r25, r1
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <action+0x29c>
								PORTA |= 1<<(1);
 6a2:	11 9a       	sbi	0x02, 1	; 2
 6a4:	11 c0       	rjmp	.+34     	; 0x6c8 <action+0x2be>
							}
							else  PORTB |= 1<<(i*3+j);
 6a6:	a5 b1       	in	r26, 0x05	; 5
 6a8:	9b 01       	movw	r18, r22
 6aa:	28 0f       	add	r18, r24
 6ac:	39 1f       	adc	r19, r25
 6ae:	6e 01       	movw	r12, r28
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <action+0x2ac>
 6b2:	cc 0c       	add	r12, r12
 6b4:	dd 1c       	adc	r13, r13
 6b6:	2a 95       	dec	r18
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <action+0x2a8>
 6ba:	96 01       	movw	r18, r12
 6bc:	2a 2b       	or	r18, r26
 6be:	25 b9       	out	0x05, r18	; 5
				board[0][2]=board[1][1]=board[2][0]=ch;
			}
			
			while(1){
				for (int i=0;i<3;i++){
					for (int j=0;j<3;j++){
 6c0:	01 96       	adiw	r24, 0x01	; 1
 6c2:	83 30       	cpi	r24, 0x03	; 3
 6c4:	91 05       	cpc	r25, r1
 6c6:	61 f6       	brne	.-104    	; 0x660 <action+0x256>
			else {
				board[0][2]=board[1][1]=board[2][0]=ch;
			}
			
			while(1){
				for (int i=0;i<3;i++){
 6c8:	4f 5f       	subi	r20, 0xFF	; 255
 6ca:	5f 4f       	sbci	r21, 0xFF	; 255
 6cc:	6d 5f       	subi	r22, 0xFD	; 253
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	43 30       	cpi	r20, 0x03	; 3
 6d2:	51 05       	cpc	r21, r1
 6d4:	31 f0       	breq	.+12     	; 0x6e2 <action+0x2d8>
 6d6:	fb 01       	movw	r30, r22
 6d8:	ef 5f       	subi	r30, 0xFF	; 255
 6da:	fd 4f       	sbci	r31, 0xFD	; 253
	if (ended>0){
		PORTB = 0;
		PORTC = 0;
		PORTA = 0;
		if (ended==1 || ended ==2){
			unsigned char ch =(ended==1?'x':'o');
 6dc:	81 2f       	mov	r24, r17
 6de:	9b 2f       	mov	r25, r27
 6e0:	bf cf       	rjmp	.-130    	; 0x660 <action+0x256>
							else  PORTB |= 1<<(i*3+j);
						}
						
					}
				}
				PORTG |= 0x01;
 6e2:	a0 9a       	sbi	0x14, 0	; 20
 6e4:	2f e3       	ldi	r18, 0x3F	; 63
 6e6:	32 e4       	ldi	r19, 0x42	; 66
 6e8:	8f e0       	ldi	r24, 0x0F	; 15
 6ea:	21 50       	subi	r18, 0x01	; 1
 6ec:	30 40       	sbci	r19, 0x00	; 0
 6ee:	80 40       	sbci	r24, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <action+0x2e0>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <action+0x2ea>
 6f4:	00 00       	nop
				_delay_ms(5000);
				PORTG = 0;
 6f6:	14 ba       	out	0x14, r1	; 20
				PORTB = 0;
 6f8:	15 b8       	out	0x05, r1	; 5
				PORTC = 0;
 6fa:	18 b8       	out	0x08, r1	; 8
				PORTA = 0;
 6fc:	12 b8       	out	0x02, r1	; 2
 6fe:	9f e3       	ldi	r25, 0x3F	; 63
 700:	22 e4       	ldi	r18, 0x42	; 66
 702:	3f e0       	ldi	r19, 0x0F	; 15
 704:	91 50       	subi	r25, 0x01	; 1
 706:	20 40       	sbci	r18, 0x00	; 0
 708:	30 40       	sbci	r19, 0x00	; 0
 70a:	e1 f7       	brne	.-8      	; 0x704 <action+0x2fa>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <action+0x304>
 70e:	00 00       	nop
 710:	a2 cf       	rjmp	.-188    	; 0x656 <action+0x24c>
				
		}
		}
		else{
			while (1){
				PORTL = 0xFF;
 712:	eb e0       	ldi	r30, 0x0B	; 11
 714:	f1 e0       	ldi	r31, 0x01	; 1
 716:	8f ef       	ldi	r24, 0xFF	; 255
 718:	80 83       	st	Z, r24
				PORTA |= 1<<(2);
 71a:	12 9a       	sbi	0x02, 2	; 2
 71c:	9f e3       	ldi	r25, 0x3F	; 63
 71e:	2d e0       	ldi	r18, 0x0D	; 13
 720:	33 e0       	ldi	r19, 0x03	; 3
 722:	91 50       	subi	r25, 0x01	; 1
 724:	20 40       	sbci	r18, 0x00	; 0
 726:	30 40       	sbci	r19, 0x00	; 0
 728:	e1 f7       	brne	.-8      	; 0x722 <action+0x318>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <action+0x322>
 72c:	00 00       	nop
				_delay_ms(1000);
				PORTL = 0;
 72e:	10 82       	st	Z, r1
				PORTA = 0;
 730:	12 b8       	out	0x02, r1	; 2
 732:	9f e3       	ldi	r25, 0x3F	; 63
 734:	2d e0       	ldi	r18, 0x0D	; 13
 736:	33 e0       	ldi	r19, 0x03	; 3
 738:	91 50       	subi	r25, 0x01	; 1
 73a:	20 40       	sbci	r18, 0x00	; 0
 73c:	30 40       	sbci	r19, 0x00	; 0
 73e:	e1 f7       	brne	.-8      	; 0x738 <action+0x32e>
 740:	00 c0       	rjmp	.+0      	; 0x742 <action+0x338>
 742:	00 00       	nop
 744:	e9 cf       	rjmp	.-46     	; 0x718 <action+0x30e>
		action();
		_delay_ms(1500);
	}

}
void action(){
 746:	40 e0       	ldi	r20, 0x00	; 0
 748:	50 e0       	ldi	r21, 0x00	; 0
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	d0 e0       	ldi	r29, 0x00	; 0
 750:	c0 e0       	ldi	r28, 0x00	; 0
			}
			else if (board[i][j]=='o'){
				if (i==2 && j==2){
					PORTA |= 1<<(1);
				}
				else  PORTB |= 1<<(i*3+j);
 752:	e1 e0       	ldi	r30, 0x01	; 1
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	f7 ce       	rjmp	.-530    	; 0x546 <action+0x13c>
				_delay_ms(1000);
			}
		}
	}
	}
}
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	1f 91       	pop	r17
 75e:	0f 91       	pop	r16
 760:	ff 90       	pop	r15
 762:	ef 90       	pop	r14
 764:	df 90       	pop	r13
 766:	cf 90       	pop	r12
 768:	08 95       	ret

0000076a <main>:

int main(void)
{
	/* Replace with your application code */
	
	DDRD = DDRD | 0b01110000; //PortA bits 0 to 4 input     (0:left, 1:right, 2:up, 3:down, 4:select)
 76a:	8a b1       	in	r24, 0x0a	; 10
 76c:	80 67       	ori	r24, 0x70	; 112
 76e:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | 0b10001111; //PortA bits 0 to 4 include pull-up resistors
 770:	8b b1       	in	r24, 0x0b	; 11
 772:	8f 68       	ori	r24, 0x8F	; 143
 774:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0xFF; //portC all output --> 8 (8 player 1 0--> 00)
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF; // PortB all output --> 8 (8 Player 2 0--> 00)
 77a:	84 b9       	out	0x04, r24	; 4
	DDRA = DDRA & 0b10001111; //PortD pins 7, 3,2,1,0 -->5 (2 player 1, 2 Player 2, 1 Select)
 77c:	91 b1       	in	r25, 0x01	; 1
 77e:	9f 78       	andi	r25, 0x8F	; 143
 780:	91 b9       	out	0x01, r25	; 1
	DDRL = 0xFF; // portL all output --> 8 (29) (8 Select)
 782:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	// c= 0 // B=1 // D=2; l=3
	init();
 786:	c1 dc       	rcall	.-1662   	; 0x10a <init>
	DDRG = DDRG | 0b00000001; //PORTG pin0 output --> 1 (30) (Buzzer)
 788:	98 9a       	sbi	0x13, 0	; 19
	while (1)
	{
		action();
 78a:	3f de       	rcall	.-898    	; 0x40a <action>
 78c:	2f ed       	ldi	r18, 0xDF	; 223
 78e:	83 e9       	ldi	r24, 0x93	; 147
 790:	94 e0       	ldi	r25, 0x04	; 4
 792:	21 50       	subi	r18, 0x01	; 1
 794:	80 40       	sbci	r24, 0x00	; 0
 796:	90 40       	sbci	r25, 0x00	; 0
 798:	e1 f7       	brne	.-8      	; 0x792 <main+0x28>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <main+0x32>
 79c:	00 00       	nop
 79e:	f5 cf       	rjmp	.-22     	; 0x78a <main+0x20>

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
